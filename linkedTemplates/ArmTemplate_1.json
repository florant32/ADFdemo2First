{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "ADFDataLakeAccelerator"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/ds_AzureDatabase_GenericDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ls_GenericAzureDatabase",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": {
                            "value": "@dataset().SecretName",
                            "type": "Expression"
                        },
                        "KeyVaultURI": {
                            "value": "@dataset().KeyVaultURI",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "SchemaName": {
                        "type": "string",
                        "defaultValue": "SchemaName"
                    },
                    "TableName": {
                        "type": "string",
                        "defaultValue": "TableName"
                    },
                    "KeyVaultURI": {
                        "type": "string",
                        "defaultValue": "https://akv-datalake-accelerator.vault.azure.net/"
                    }
                },
                "folder": {
                    "name": "Datasets Templates"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_GenericPostgresAzureDatabase')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ls_GenericPostgresSQLAzureDatabase",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": {
                            "value": "@dataset().SecretName",
                            "type": "Expression"
                        },
                        "KeyVaultURI": {
                            "value": "@dataset().KeyVaultURI",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "SchemaName": {
                        "type": "string",
                        "defaultValue": "SchemaName"
                    },
                    "TableName": {
                        "type": "string",
                        "defaultValue": "TableName"
                    },
                    "KeyVaultURI": {
                        "type": "string",
                        "defaultValue": "https://akv-datalake-accelerator.vault.azure.net/"
                    }
                },
                "folder": {
                    "name": "Datasets Templates"
                },
                "annotations": [],
                "type": "AzurePostgreSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_SQLServer_OnPremises')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ls_SQLServer_Onpremises",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": {
                            "value": "@dataset().SecretName",
                            "type": "Expression"
                        },
                        "KeyVaultURI": {
                            "value": "@dataset().KeyVaultURI",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "SchemaName": {
                        "type": "string",
                        "defaultValue": "SchemaName"
                    },
                    "TableName": {
                        "type": "string",
                        "defaultValue": "TableName"
                    },
                    "KeyVaultURI": {
                        "type": "string",
                        "defaultValue": "https://akv-datalake-accelerator.vault.azure.net/"
                    }
                },
                "folder": {
                    "name": "Datasets Templates"
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_AzureSynapse_GenericDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ls_GenericAzureSynapse",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "SecretName": {
                            "value": "@dataset().SecretName",
                            "type": "Expression"
                        },
                        "KeyVaultURI": {
                            "value": "@dataset().KeyVaultURI",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "SchemaName": {
                        "type": "string",
                        "defaultValue": "SchemaName"
                    },
                    "TableName": {
                        "type": "string",
                        "defaultValue": "TableName"
                    },
                    "KeyVaultURI": {
                        "type": "string",
                        "defaultValue": "https://akv-datalake-accelerator.vault.azure.net/"
                    }
                },
                "folder": {
                    "name": "Datasets Templates"
                },
                "annotations": [],
                "type": "AzureSqlDWTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().SchemaName",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().TableName",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure Database for PostgreSQL to ADL2 - parquet')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzurePostgreSqlSource",
                                                        "partitionOption": "None"
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_GenericPostgresAzureDatabase",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "SchemaName": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().DestinationControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Azure database for PostgreSQL"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_GenericPostgresAzureDatabase')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure Database for PostgreSQL to ADL2 - csv')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzurePostgreSqlSource",
                                                        "partitionOption": "None"
                                                    },
                                                    "sink": {
                                                        "type": "AzureSqlSink",
                                                        "sqlWriterStoredProcedureName": {
                                                            "value": "@{concat(\nitem().DestinationControl2,'.',item().DestinationControl4\n)}",
                                                            "type": "Expression"
                                                        },
                                                        "sqlWriterTableType": {
                                                            "value": "@{concat(\nitem().DestinationControl2,'.',item().DestinationControl5\n)}",
                                                            "type": "Expression"
                                                        },
                                                        "storedProcedureTableTypeParameterName": {
                                                            "value": "@{concat(\nitem().DestinationControl5\n)}",
                                                            "type": "Expression"
                                                        },
                                                        "disableMetricsCollection": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_GenericPostgresAzureDatabase",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "SchemaName": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_AzureDatabase_GenericDataset",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "SchemaName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Azure database for PostgreSQL"
                },
                "annotations": [],
                "lastPublishTime": "2022-07-21T20:20:10Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_GenericPostgresAzureDatabase')]",
                "[concat(variables('factoryId'), '/datasets/ds_AzureDatabase_GenericDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure CosmosDB Mongo to Azure CosmosDB Mongo')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Load each file into Cosmos DB",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into Cosmos DB Mongo",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Load each file into Cosmos DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Load each file into Cosmos DB').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "CosmosDbMongoDbApiSource",
                                                        "batchSize": 100
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_AzureCosmosDBMongo",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "CollectionName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "DatabaseName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().DestinationControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Cosmos DB Mongo"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure Database to Azure Database')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Azure database",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into Azure database",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Azure database",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Azure database').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into Azure database",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "sink": {
                                                        "type": "AzureSqlSink",
                                                        "sqlWriterStoredProcedureName": {
                                                            "value": "@{concat(\nitem().DestinationControl2,'.',item().DestinationControl4\n)}",
                                                            "type": "Expression"
                                                        },
                                                        "sqlWriterTableType": {
                                                            "value": "@{concat(\nitem().DestinationControl2,'.',item().DestinationControl5\n)}",
                                                            "type": "Expression"
                                                        },
                                                        "storedProcedureTableTypeParameterName": {
                                                            "value": "@{concat(\nitem().DestinationControl5\n)}",
                                                            "type": "Expression"
                                                        },
                                                        "disableMetricsCollection": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_AzureDatabase_GenericDataset",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "SchemaName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_AzureDatabase_GenericDataset",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "SchemaName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure database",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure database",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.dataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Azure database"
                },
                "annotations": [],
                "lastPublishTime": "2022-07-21T20:20:10Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_AzureDatabase_GenericDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure CosmosDB Mongo to ADL2 - parquet')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Azure database",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Azure database",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Azure database').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "CosmosDbMongoDbApiSource",
                                                        "batchSize": 100
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_AzureCosmosDBMongo",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "CollectionName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "DatabaseName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().DestinationControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Cosmos DB Mongo"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - Azure Databricks')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Azure Databricks",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into Azure Databricks",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Azure Databricks",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Azure Databricks').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Run Databricks notebook",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Run Databricks notebook",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Run Databricks notebook",
                                                "type": "DatabricksNotebook",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "notebookPath": {
                                                        "value": "@{concat(item().DestinationControl2,item().DestinationControl3)}",
                                                        "type": "Expression"
                                                    },
                                                    "baseParameters": {
                                                        "FileSourcePath": {
                                                            "value": "@{concat(item().SourceControl2,item().SourceControl3)}",
                                                            "type": "Expression"
                                                        },
                                                        "FileDestinationPath": {
                                                            "value": "@item().DestinationControl4",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_GenericAzureDatabricks",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "DataBricksURL": {
                                                            "value": "@item().DestinationControl1",
                                                            "type": "Expression"
                                                        },
                                                        "SecretName": {
                                                            "value": "@item().DestinationKeyVaultSecretName",
                                                            "type": "Expression"
                                                        },
                                                        "ClusterID": {
                                                            "value": "@item().DestinationControl5",
                                                            "type": "Expression"
                                                        },
                                                        "KeyVaultURI": {
                                                            "value": "@item().DestinationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Databricks"
                },
                "annotations": [],
                "lastPublishTime": "2022-07-21T21:07:30Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From ADL2 wildcard - json to CosmosDB Mongo')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into CosmosDB Mongo",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into Azure Cosmos DB Mongo",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into CosmosDB Mongo",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into CosmosDB Mongo').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into Azure CosmosDB Mongo",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "JsonSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": {
                                                                "value": "@item().SourceControl4",
                                                                "type": "Expression"
                                                            },
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "JsonReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "CosmosDbMongoDbApiSink",
                                                        "writeBatchTimeout": "00:30:00",
                                                        "writeBehavior": "insert"
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_json",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_AzureCosmosDBMongo",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "CollectionName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "DatabaseName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure CosmosDB Mongo",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure CosmosDB Mongo",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.DataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.Throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure CosmosDB Mongo to ADL2 wildcard - parquet')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Load each file into Cosmos DB",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Load each file into Cosmos DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Load each file into Cosmos DB').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "CosmosDbMongoDbApiSource",
                                                        "batchSize": 100
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_AzureCosmosDBMongo",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "CollectionName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "DatabaseName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@{concat(\nitem().DestinationControl4,'/',\nformatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/',\nitem().DestinationControl5\n)}",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Cosmos DB Mongo"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From ADL2 - parquet to Azure Database')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Azure database",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into Azure Database - stage",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Azure database",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Azure database').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into Azure database",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "ParquetSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "AzureSqlSink",
                                                        "disableMetricsCollection": false
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_AzureDatabase_GenericDataset",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "SchemaName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure database",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure database",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.DataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure database').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-05T15:41:49Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_AzureDatabase_GenericDataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure Database for MySQL to ADL2 - parquet')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.GroupName = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureMySqlSource",
                                                        "queryTimeout": "02:00:00"
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_GenericMySQLAzureDatabase",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().DestinationControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Azure database for MySQL"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From Azure Database for MySQL to ADL2 - csv')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureMySqlSource",
                                                        "queryTimeout": "02:00:00"
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_GenericMySQLAzureDatabase",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "TableName": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_csv",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().DestinationControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.dataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Azure database for MySQL"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From ADL2 wildcard - parquet to CosmosDB Mongo')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into CosmosDB Mongo",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into Azure Cosmos DB Mongo",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into CosmosDB Mongo",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into CosmosDB Mongo').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into Azure CosmosDB Mongo",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "ParquetSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "wildcardFolderPath": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "wildcardFileName": {
                                                                "value": "@item().SourceControl4",
                                                                "type": "Expression"
                                                            },
                                                            "enablePartitionDiscovery": false
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "CosmosDbMongoDbApiSink",
                                                        "writeBatchTimeout": "00:30:00",
                                                        "writeBehavior": "insert"
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_AzureCosmosDBMongo",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "CollectionName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "DatabaseName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure CosmosDB Mongo",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure CosmosDB Mongo",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.DataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.Throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From ADL2 - parquet to CosmosDB Mongo')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into Azure database",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load each file into Azure Cosmos DB Mongo",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into Azure database",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into Azure database').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into Azure CosmosDB Mongo",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "ParquetSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "CosmosDbMongoDbApiSink",
                                                        "writeBatchTimeout": "00:30:00",
                                                        "writeBehavior": "insert"
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().SourceKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().SourceKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_AzureCosmosDBMongo",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "CollectionName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "DatabaseName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure CosmosDB Mongo",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into Azure CosmosDB Mongo",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.dataWritten\n",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into Azure CosmosDB Mongo').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source Data Lake"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From http to ADL2 wildcard - parquet')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": "https://akv-datalake-accelerator.vault.azure.net/"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "ParquetSource",
                                                        "storeSettings": {
                                                            "type": "HttpReadSettings",
                                                            "requestMethod": "GET"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_HTTP_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "BaseURL": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "FileAddress": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@{concat(\nitem().DestinationControl4,'/',\nformatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/',\nitem().DestinationControl5\n)}",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.Throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source http"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-05T18:21:43Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From http to ADL2 - parquet')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "ParquetSource",
                                                        "storeSettings": {
                                                            "type": "HttpReadSettings",
                                                            "requestMethod": "GET"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "ParquetSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "ParquetWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_HTTP_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "BaseURL": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "FileAddress": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_parquet",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().DestinationControl4",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.Throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source http"
                },
                "annotations": [],
                "lastPublishTime": "2022-09-05T18:24:37Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Generic - From http to ADL2 wildcard - csv')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get records to load into ADL2",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": {
                                    "value": "SELECT\n    MTC.*,\n    BS.ScheduleName\nFROM\n    [operation].[MetadataTableControl] MTC\nINNER JOIN\n    [operation].[BatchSchedule] BS ON MTC.BatchScheduleID = BS.BatchScheduleID\nWHERE\n    MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.Active = 1\n    AND BS.Active = 1\n    AND BS.ScheduleName = '@{pipeline().parameters.ScheduleName}'",
                                    "type": "Expression"
                                },
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "ds_OperationAzureDB",
                                "type": "DatasetReference",
                                "parameters": {
                                    "SecretName": {
                                        "value": "@pipeline().parameters.SecretName",
                                        "type": "Expression"
                                    },
                                    "OperationKeyVaultURI": {
                                        "value": "@pipeline().parameters.OperationKeyVaultURI",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Load records into ADL2",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get records to load into ADL2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get records to load into ADL2').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "if - Verify tables to load into Destination",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Verify tables to load into Destination",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@if(equals(activity('Verify tables to load into Destination').output.firstrow.ProcessTable,'Yes'), 'True','False')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get parameters to start log",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 10 --Status = 'Process running'\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log start",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to start log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to start log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Ingest records into ADL2",
                                                "type": "Copy",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log start",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "HttpReadSettings",
                                                            "requestMethod": "GET"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobFSWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_HTTP_GenericDataset_csv",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "BaseURL": {
                                                                "value": "@item().SourceControl1",
                                                                "type": "Expression"
                                                            },
                                                            "FileAddress": {
                                                                "value": "@item().SourceControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@item().SourceControl3",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_ADL2_GenericDataset_csv",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@item().DestinationKeyVaultSecretName",
                                                                "type": "Expression"
                                                            },
                                                            "StorageAccount": {
                                                                "value": "@item().DestinationControl1",
                                                                "type": "Expression"
                                                            },
                                                            "ContainerName": {
                                                                "value": "@item().DestinationControl2",
                                                                "type": "Expression"
                                                            },
                                                            "FolderName": {
                                                                "value": "@item().DestinationControl3",
                                                                "type": "Expression"
                                                            },
                                                            "FileName": {
                                                                "value": "@{concat(\nitem().DestinationControl4,'/',\nformatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/',\nitem().DestinationControl5\n)}",
                                                                "type": "Expression"
                                                            },
                                                            "KeyVaultURI": {
                                                                "value": "@item().DestinationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Get parameters to end log",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 100 --\"End with success\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Get parameters to log error",
                                                "type": "Lookup",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Ingest records into ADL2",
                                                        "dependencyConditions": [
                                                            "Failed"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "AzureSqlSource",
                                                        "sqlReaderQuery": {
                                                            "value": "SELECT\n    2 AS InsertUpsert,\n    NULL AS BatchProcessID,\n    MTC.BatchProcessPhaseNameID,\n    PR.ProjectID,\n    MTC.BatchScheduleID,\n    BPSM.BatchProcessStatusNameID,\n    BPTD.ProcessTableName,\n    BPTD.TableGroupNumber,\n    MTC.GroupLoad\nFROM\n\t[operation].[ProjectName] PR\nINNER JOIN\n\t[operation].[BatchSchedule] BS ON PR.ProjectID = BS.ProjectID\nINNER JOIN\n\t[operation].[MetadataTableControl] MTC ON BS.BatchScheduleID = MTC.BatchScheduleID\nINNER JOIN\n    [operation].[BatchProcessTableDetails] BPTD ON MTC.TableGroupNumber = BPTD.TableGroupNumber\n    AND MTC.BatchProcessPhaseNameID = BPTD.BatchProcessPhaseNameID\nCROSS JOIN\n    [operation].[BatchProcessStatusName] BPSM\nWHERE\n    --Please check passed filters:\n    BPSM.BatchProcessStatusNameID = 20 --\"End with error\"\n    AND MTC.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND BPTD.ProcessTableName = '@{item().FinalTableName}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'",
                                                            "type": "Expression"
                                                        },
                                                        "queryTimeout": "02:00:00",
                                                        "partitionOption": "None"
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_OperationAzureDB",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "SecretName": {
                                                                "value": "@pipeline().parameters.SecretName",
                                                                "type": "Expression"
                                                            },
                                                            "OperationKeyVaultURI": {
                                                                "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log end",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to end log",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to end log').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataRead",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.DataWritten",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.Throughput",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": {
                                                                "value": "@activity('Ingest records into ADL2').output.rowsCopied",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log error",
                                                "type": "SqlServerStoredProcedure",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get parameters to log error",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "7.00:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "storedProcedureName": "[[operation].[BatchProcess_Upsert]",
                                                    "storedProcedureParameters": {
                                                        "BatchProcessID": {
                                                            "value": {
                                                                "value": "@pipeline().parameters.BatchProcessID",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int32"
                                                        },
                                                        "BatchProcessPhaseNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessPhaseNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessStatusNameID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchProcessStatusNameID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchScheduleID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.BatchScheduleID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "InsertUpsert": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.InsertUpsert}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "ProcessTableName": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProcessTableName}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "String"
                                                        },
                                                        "ProjectID": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.ProjectID}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "TableGroupNumber": {
                                                            "value": {
                                                                "value": "@{activity('Get parameters to log error').output.firstRow.TableGroupNumber}",
                                                                "type": "Expression"
                                                            },
                                                            "type": "Int16"
                                                        },
                                                        "BatchProcessIDOutPut": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        },
                                                        "DataRead": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "DataWritten": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "Throughput": {
                                                            "value": "0",
                                                            "type": "Decimal"
                                                        },
                                                        "RowsWritten": {
                                                            "value": "0",
                                                            "type": "Int32"
                                                        }
                                                    }
                                                },
                                                "linkedServiceName": {
                                                    "referenceName": "ls_OperationAzureDB",
                                                    "type": "LinkedServiceReference",
                                                    "parameters": {
                                                        "SecretName": {
                                                            "value": "@pipeline().parameters.SecretName",
                                                            "type": "Expression"
                                                        },
                                                        "OperationKeyVaultURI": {
                                                            "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Verify tables to load into Destination",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "AzureSqlSource",
                                            "sqlReaderQuery": {
                                                "value": "SELECT DISTINCT\n    'Yes'                       AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 1\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'\nUNION\nSELECT DISTINCT\n    'No'                        AS ProcessTable,\n    BPTD.BatchProcessID         AS BatchProcessID\nFROM\n    [operation].[BatchProcessTableDetails] BPTD\nINNER JOIN\n    [operation].[MetadataTableControl] MTC ON BPTD.TableGroupNumber = MTC.TableGroupNumber\n    AND BPTD.BatchScheduleID = MTC.BatchScheduleID\nWHERE\n    BPTD.ActiveInBatchProcess = 0\n    AND BPTD.BatchProcessPhaseNameID = '@{pipeline().parameters.BatchProcessPhaseNameID}'\n    AND BPTD.BatchProcessID = '@{pipeline().parameters.BatchProcessID}'\n    AND MTC.GroupLoad = '@{pipeline().parameters.GroupLoad}'\n    AND MTC.FinalTableName = '@{item().FinalTableName}'",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "ds_OperationAzureDB",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "SecretName": {
                                                    "value": "@pipeline().parameters.SecretName",
                                                    "type": "Expression"
                                                },
                                                "OperationKeyVaultURI": {
                                                    "value": "@pipeline().parameters.OperationKeyVaultURI",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {},
                    "cancelAfter": {}
                },
                "parameters": {
                    "BatchProcessID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "SecretName": {
                        "type": "string",
                        "defaultValue": "SecretName"
                    },
                    "ScheduleName": {
                        "type": "string",
                        "defaultValue": "ScheduleName"
                    },
                    "BatchProcessPhaseNameID": {
                        "type": "int",
                        "defaultValue": 0
                    },
                    "GroupLoad": {
                        "type": "string",
                        "defaultValue": "GroupLoad"
                    },
                    "OperationKeyVaultURI": {
                        "type": "string",
                        "defaultValue": "OperationKeyVaultURI"
                    }
                },
                "folder": {
                    "name": "Pipeline Templates/Source http"
                },
                "annotations": [],
                "lastPublishTime": "2022-08-30T17:48:51Z"
            },
            "dependsOn": []
        }
    ]
}